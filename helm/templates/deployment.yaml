apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      {{- if .Values.persistence.enabled }}
      securityContext:
        fsGroup: 1001
      {{- end }}
      serviceAccountName: {{ .Chart.Name }}
      {{- if .Values.persistence.enabled }}
      initContainers:
      - name: migrate
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/bash","-lc"]
        args:
          - |
            set -euo pipefail
            export HOME=/tmp
            export NPM_CONFIG_CACHE=/tmp/.npm
            mkdir -p "$NPM_CONFIG_CACHE"
            if command -v npm >/dev/null 2>&1; then
              npm exec -y prisma@6.15.0 migrate deploy
            elif command -v npx >/dev/null 2>&1; then
              npx prisma@6.15.0 migrate deploy
            else
              echo "npm/npx not found; cannot run prisma migrate" >&2
              exit 1
            fi
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- if and .Values.secrets (not .Values.aws.secretsManager.enabled) }}
        {{- range $key, $value := .Values.secrets }}
        {{- if $value }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              name: {{ $.Chart.Name }}-secrets
              key: {{ $key }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.aws.secretsManager.enabled }}
        envFrom:
        - secretRef:
            name: {{ .Chart.Name }}-app-secrets
        {{- end }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.persistence.mountPath }}
          {{- if .Values.persistence.subPath }}
          subPath: {{ .Values.persistence.subPath }}
          {{- end }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 3000
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- if and .Values.secrets (not .Values.aws.secretsManager.enabled) }}
        {{- range $key, $value := .Values.secrets }}
        {{- if $value }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              name: {{ $.Chart.Name }}-secrets
              key: {{ $key }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.aws.secretsManager.enabled }}
        envFrom:
        - secretRef:
            name: {{ .Chart.Name }}-app-secrets
        {{- end }}
        {{- if .Values.persistence.enabled }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.persistence.mountPath }}
          {{- if .Values.persistence.subPath }}
          subPath: {{ .Values.persistence.subPath }}
          {{- end }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: {{ .Values.healthcheck.path }}
            port: 3000
            scheme: HTTP
          initialDelaySeconds: {{ .Values.healthcheck.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthcheck.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.healthcheck.liveness.timeoutSeconds }}
          successThreshold: {{ .Values.healthcheck.liveness.successThreshold }}
          failureThreshold: {{ .Values.healthcheck.liveness.failureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.healthcheck.path }}
            port: 3000
            scheme: HTTP
          initialDelaySeconds: {{ .Values.healthcheck.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthcheck.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.healthcheck.readiness.timeoutSeconds }}
          successThreshold: {{ .Values.healthcheck.readiness.successThreshold }}
          failureThreshold: {{ .Values.healthcheck.readiness.failureThreshold }}
        startupProbe:
          httpGet:
            path: {{ .Values.healthcheck.path }}
            port: 3000
            scheme: HTTP
          initialDelaySeconds: {{ .Values.healthcheck.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthcheck.startup.periodSeconds }}
          timeoutSeconds: {{ .Values.healthcheck.startup.timeoutSeconds }}
          successThreshold: {{ .Values.healthcheck.startup.successThreshold }}
          failureThreshold: {{ .Values.healthcheck.startup.failureThreshold }}
      {{- if .Values.persistence.enabled }}
      volumes:
      - name: data
        {{- if .Values.persistence.storageClassName }}
        persistentVolumeClaim:
          claimName: {{ .Chart.Name }}-data
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- end }}